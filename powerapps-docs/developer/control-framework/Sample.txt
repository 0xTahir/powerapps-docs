Overview 
 
Use the PowerApps Command Line Interface (CLI) to create, debug and deploy custom PowerApps Component Framework (PCF) controls. The PowerApps CLI will enable developers to quickly create PCF controls and will in the future be expanded to include support for additional development and Application Lifecycle Management (ALM) experiences. 
 
In this private preview, we are enabling developers to use the first version of PowerApps CLI to create PCF custom controls, thus your feedback will help us take this tool to the next level.  
 
What is Microsoft PowerApps CLI?  
Microsoft PowerApps CLI is a simple, single-stop developer command line interface enabling you to create custom controls. The PowerApps CLI is also the first step towards a comprehensive ALM story where enterprise developers and ISVs can create, build, debug and publish their PowerApps and Dynamics 365 CE extensions and customizations quickly and efficiently.  
What is PowerApps Component Framework 
PowerApps Component Framework (PCF) enables developers to build custom controls to extend the user experiences in PowerApps and Dynamics 365 CE beyond the controls delivered out of the box in the Maker Studio. More information PowerApps Component Framework (Link to the PCF PDF file) 
 
Pre-requisites to use PowerApps CLI  
To use PowerApps CLI you will need the following: 
Install Npm (comes with Node.js) OR Install Node.js (comes with npm). We recommend LTS (Long Term Support) version 10.15.3 LTS as it seems to be most stables 
If you don’t already have Visual Studio 2017 (or newer) please follow one of below options: 
Option 1: Install Visual Studio 2017 (or newer) 
Option 2: Install .NET Core 2.2 SDK (or newer) and Install Visual Studio Code  
Install Microsoft PowerApps CLI using steps: 
Create a directory on your machine, called something like “c:\pac”  
Open your Developer Command Prompt for VS 2017 and navigate to the directory you created above(c:\pac) 
 
Cd c:\pac 
 
Copy-Paste below command and run it: 
 
powershell Invoke-Command -ScriptBlock ([scriptblock]::Create(((New-Object System.Net.WebClient).DownloadString('https://powerappsclipreview.blob.core.windows.net/install/InstallAndConfigureCLI.ps1')))) -ArgumentList "stable" 
 
Note: To deploy your custom control, you will need Common Data Service environment with System administrator or System customizer privileges. 
Note: Currently PowerApps CLI is supported on Windows 10. 
 
Usage Guide 
To get started, open a new window of Developer Command Prompt for VS 2017 window after installing PowerApps CLI. 
 
.Creating a new PCF Control 
In Developer Command Prompt for VS 2017 window create a new folder where desired on your local hard drive (ie. C:\Users\<your user alias>\Documents\My_PCF_Control) 
Go to the newly created folder using below command 
 
Cd  <specify your new folder path >  
 
Use a single command to create a new control project with some basic parameters 
 
pac pcf init --namespace <specify your namespace here> --name <put control name here> --template <control type> 
 
Note: Today we offer two types of control 1) field 2) dataset 
 
To retrieve all the required project dependencies run the command  
        npm install 
 
Open your project in any developer environment of your choice and get started with your custom control development. You can use tutorials below to implement a sample control. 
 
Building your PCF Control 
To build your control you can open the containing folder in Visual Studio Code and use the (Ctrl-Shift-B) command, then select your build options.  Or you can build your control quickly using  
npm run build 
 
Debugging your PCF Control 
Once you are done implementing your custom control logic, you can use the following command to start the debugging and testing process. The project will always be built first before starting the control harness. 
npm start 
 
Note: Today you can only visualize your field control, but dataset support is coming soon. Below image shows a sample control implemented in the tutorial below just as an example. 
 
 
 
 
As show in the image above, the browse window will open with 3 sections. Your control will be rendered in the left pane while the right pane consists of "Inputs" and "Outputs" sections: 
Inputs section is an interactive UI that displays all properties and their types/type-groups defined in the manifest.xml. It allows you to key in mock data for each property. 
Outputs section renders the output whenever a control's getOutputs method gets called.  
 
Note: If you want to modify the manifest.xml or create additional properties, you will need to restart the debug process before they appear in the inputs section. 
 
 
As you are inputting mock data you can use the browser’s debugging capabilities to observe the control behavior. Most browsers provide you with a debugging tool to help you debug your code directly in the browser. Typically, you can activate debugging by pressing the F12 key. 
For example, on Microsoft Edge,  
Press F12 to open inspector 
Click on your control 
On top bar, go to ‘Debugger’, and then start searching for the control name described in the Manifest file in the search bar. 
 
 
 
 
Note: It's a good practice to set breakpoints on the control’s lifecycle method like init & updateView. 
 
 
You can also interact with the control locally in real time and observe elements in the DOM by setting a breakpoint in the sources tab as follows: 
 
 
 
 
Note: You can also use steps provided in this article to perform outer loop debugging using fiddler autoresponder. 
 
 
Deploying your PCF Control 
When the debugging and development is finished, you just have one step remaining – to deploy your new control.  
Follow the steps below to create a solution and deploy your new custom control.  
To start with you will want to create a new solution project in a directory of your choice run below command after cd <your new folder> 
pac solution init --publisherName <enter your publisher name> -- customizationPrefix <enter your publisher name> 
 
Note: The publisherName and cutomizationPrefix values must be unique to your environment. Please click on the links to learn more about each.  
 
Once your new solution project is created, it will need to know where your newly created control is. You can add the reference by running below command 
 
pac solution add-reference --path <relative path of your pcf project on disk> 
 
To generate a solution from your solution project, you will need to cd into your solution project directory and build the project using below command 
Msbuild /t:restore 
Msbuild 
Import the solution using the web portal by taking the solution.zip from the output directory located at \bin\debug\.  
 
Adding custom controls to a grid  
To add a custom control like data-set control or simple table control to a grid or view, follow the steps mentioned in the topic Add controls to fields and entities. 
Telemetry  
The feature team is aggregating anonymized telemetry in order to understand which features\capabilities in the Microsoft PowerApps CLI tool are most often used by developers. The aggregated data allows us to provide the best experience to our customers by focusing on what’s truly important.  
 
Note: If for any reason you would like to disable telemetry collection, follow below steps 
 
             pac telemetry --enable false 
 
Note: To turn telemetry back on, use the pac telemetry- -enable true argument. 